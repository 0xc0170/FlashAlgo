/* mbed Microcontroller Library
 * Copyright (c) 2016 ARM Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "flash_api.h"
#include "flash_data.h"
#include "critical.h"

// This file is automagically generated

// flash algo are in RAM
static uint32_t {{name}}_FLM[] = {
    {{algo['data']}}
};

static const flash_algo_t flash_algo_config = {
    .init = {{Init}},
    .uninit = {{UnInit}},
    .erase_chip = {{EraseChip}},
    .erase_sector = {{EraseSector}},
    .verify = {{Verify}},
    .program_page = {{ProgramPage}},
    .algo_blob = {{name}}_FLM,
};

static const flash_target_config_t flash_target_config = {
    .sector_size = {{sector_size}};,
    .sector_cnt = {{sector_count}},
    .flash_start = {{flash_start}},
    .flash_end = {{flash_end}},
    .ram_start = {{ram_start}},
    .ram_end = {{ram_end}},
};

int32_t flash_init(flash_t *obj)
{
    core_util_critical_section_enter();

    obj->target_config = &flash_target_config;
    obj->flash_algo = &flash_algo_config;

    register uint32_t static_base __ASM("r9");
    uint32_t previous_static_base = static_base;
    static_base = obj->ram_start;
    int32_t ret = ((CMSIS_Algo_Function_Init)obj->flash_algo->init)(obj->flash_start, 0, 0);
    // revert back r9
    static_base = previous_static_base;

    core_util_critical_section_exit();
    return ret;
}

int32_t flash_free(flash_t *obj)
{
    // uninit is not called here as it deinitializes MCU
    return 0;
}

int32_t flash_erase_sector(flash_t *obj, uint32_t address)
{
    core_util_critical_section_enter();

    register uint32_t static_base __ASM("r9");
    uint32_t previous_static_base = static_base;
    static_base = obj->ram_start;
    int32_t ret = ((CMSIS_Algo_Function_EraseSector)obj->flash_algo->erase_sector)(address);
    // revert back r9
    static_base = previous_static_base;

    core_util_critical_section_exit();
    return ret;
}

int32_t flash_erase_chip(flash_t *obj)
{
    core_util_critical_section_enter();

    register uint32_t static_base __ASM("r9");
    uint32_t previous_static_base = static_base;
    static_base = obj->ram_start;
    int32_t ret = ((CMSIS_Algo_Function_EraseChip)obj->flash_algo->erase_chip)();
    // revert back r9
    static_base = previous_static_base;

    core_util_critical_section_exit();
    return ret;
}

int32_t flash_program_page(flash_t *obj, uint32_t address, const page_t *page)
{
    core_util_critical_section_enter();
    register uint32_t static_base __ASM("r9");
    uint32_t previous_static_base = static_base;
    static_base = obj->ram_start;
    int32_t ret = ((CMSIS_Algo_Function_ProgramPage)obj->flash_algo->program_page)(address, page->data_count , page->data);
    // revert back r9
    static_base = previous_static_base;

    core_util_critical_section_exit();
    return ret;
}

int32_t flash_verify(flash_t *obj, uint32_t address, page_t *page)
{
    core_util_critical_section_enter();

    register uint32_t static_base __ASM("r9");
    uint32_t previous_static_base = static_base;
    static_base = obj->ram_start;
    int32_t ret = ((CMSIS_Algo_Function_Verify)obj->flash_algo->verify)(address, page->data_count,  page->data);
    // revert back r9
    static_base = previous_static_base;

    core_util_critical_section_exit();
    return ret;
}
